#include <stdio.h>
#include <stdlib.h>
void read(int *, int , int);
void addition_of_two_matrices(int *, int *, int , int);
void display(int *, int, int);
void main() {
	int *a, *b, m, n, p, q;
	printf("Enter the size of the first matrix : ");
	scanf("%d%d", &m, &n);
	a = (int *)calloc(m*n,sizeof(int)); // Allocate the heap memory
	read(a, m, n);
	printf("Enter the size of the second matrix : ");
	scanf("%d%d", &p, &q);
	b = (int *)calloc(p*q,sizeof(int)); // Allocate the heap memory
	read(b, p, q);
	printf("The first matrix is\n");
	display(a, m, n);
	printf("The second matrix is\n");
	display(b, p, q);
	if ((m==p)&&(n==q)) { // Write the condition part
		addition_of_two_matrices(a, b, m, n);
	} else {
		printf("Addition is not possible\n");
	}
}
void read(int *a, int m, int n) { // Write the formal arguments
	int i, j;
	printf("Enter %d elements : ", (m*n)); // Complete the statement
	for (i = 0; i < m; i++) { // Write the condition part
		for (j = 0; j < n; j++) { // Write the condition part
			scanf("%d", (a + i * n + j)); // Complete the statement
		}
	}
}
void display(int *a, int m, int n) { // Write the formal arguments
	int i, j;
	for (i = 0; i < m; i++) { // Write the condition part
		for (j = 0; j < n; j++) { // Write the condition part
			printf("%d ", *(a + i * n + j)); // Complete the statement
		}
		printf("\n");
	}
}
void addition_of_two_matrices(int *a, int *b, int m, int n) { // Write the formal arguments
	int i, j, *c;
	c = (int *) calloc(m * n, sizeof(int)); // Allocate the heap memory
	for (i = 0; i < m; i++) { // Write the condition part
		for (j = 0; j < n; j++) { // Write the condition part
			*(c + i * n + j) = *(a + i * n + j) + *(b + i * n + j); // Complete the statement
		}
	}
	printf("The Addition Matrix is\n");
	display(c, m, n);
}